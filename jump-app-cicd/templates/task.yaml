{{- range $type := .Values.pipeTypes }}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-{{ $type }}-new-commit-test
spec:
  workspaces:
    - name: source
  steps:
{{- if eq $type "nodejs"}}
    - name: npm-install
      image: ubi8/nodejs-14
      command:
        - /bin/sh
        - -c
      args:
        - npm install
      workingDir: $(workspaces.source.path)
    - name: npm-test
      image: ubi8/nodejs-14
      command:
        - /bin/sh
        - -c
      args:
        - npm run test
      workingDir: $(workspaces.source.path)
{{- end }}
{{- if eq $type "java"}}
    - name: mvn-package
      image: gcr.io/cloud-builders/mvn
      command:
        - /usr/bin/mvn
      args:
      - package
      workingDir: $(workspaces.source.path)
{{- end }}
{{- if eq $type "python"}}
    - name: pip-install-test
      image: python:3.8.9
      command:
        - /bin/sh
        - -c
      args:
        - pip install -r requirements.txt && pytest -v
      workingDir: $(workspaces.source.path)
{{- end }}
{{- if eq $type "golang"}}
    - name: go-test
      image: golang
      command:
        - /bin/sh
        - -c
      args:
        - make test
      workingDir: $(workspaces.source.path)
{{- end }}
{{- end }}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-new-commit-start-build-tag
spec:
  workspaces:
    - name: source
  params:
    - name: buildconfig
      description: The name of the buildconfig
      type: string
    - name: commit
      description: The name of the commit
      type: string
  steps:
    - name: run-new-build
      image: quay.io/openshift/origin-cli:latest
      script: |
          #!/usr/bin/env bash
          oc start-build bc/"$(params.buildconfig)" --commit="$(params.commit)" -n {{ $.Release.Namespace }} -w
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-new-commit-image-tag
spec:
  params:
    - name: imagestream
      description: The name of the imagestream
      type: string
    - name: branch
      description: The name of the branch
      type: string
    - name: commit
      description: The name of the commit
      type: string
  steps:
    - name: run-new-build
      image: quay.io/openshift/origin-cli:latest
      script: |
        #!/usr/bin/env bash
        oc tag "$(params.imagestream)":"$(params.branch)" "$(params.imagestream)":"$(params.commit)" -n {{ $.Release.Namespace }}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-new-commit-image-deploy-by-argocd
spec:
  params:
    - name: argoapp
      description: The name of the argocdapp
      type: string
    - name: app
      description: The name of the app
      type: string
    - name: commit
      description: The name of the app commit
      type: string
  steps:
    - name: run-new-build
      image: quay.io/openshift/origin-cli:latest
      script: |
        #!/usr/bin/env bash
        export ARGOCD_PASS=$(oc get secret argocd-cluster -o jsonpath='{.data.admin\.password}' -n {{ .Values.namespaceGitOps }} | base64 -d)
        curl -sSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/download/v1.8.3/argocd-linux-amd64
        chmod +x /tmp/argocd
{{- if eq .Values.namespaceGitOps "openshift-gitops"}}
        /tmp/argocd login {{ .Values.namespaceGitOps }}-server.{{ .Values.namespaceGitOps }}.svc.cluster.local:443 --username admin --password $ARGOCD_PASS --insecure
{{- else }}
        /tmp/argocd login argocd-server.{{ .Values.namespaceGitOps }}.svc.cluster.local:443 --username admin --password $ARGOCD_PASS --insecure
{{- end }}
        /tmp/argocd app set "$(params.argoapp)" -p global.apps."$(params.app)".imagetag="$(params.commit)"
        /tmp/argocd app sync "$(params.argoapp)"
        /tmp/argocd app wait "$(params.argoapp)"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-task-sync-and-wait
spec:
  params:
    - description: The name of the argocdapp
      name: argoapp
      type: string
    - description: The name of the app
      name: app
      type: string
    - description: The name of the app commit
      name: commit
      type: string
  steps:
    - name: argocd-app-sync
      image: argoproj/argocd
      script: |
{{- if eq .Values.namespaceGitOps "openshift-gitops"}}
        argocd login {{ .Values.namespaceGitOps }}-server.{{ .Values.namespaceGitOps }}.svc.cluster.local:443 --username admin --password $ARGOCD_PASS --insecure
{{- else }}
        argocd login argocd-server.{{ .Values.namespaceGitOps }}.svc.cluster.local:443 --username admin --password $ARGOCD_PASS --insecure
{{- end }}
        argocd app set "$(params.argoapp)" -p global.apps."$(params.app)".imagetag="$(params.commit)"
        argocd app sync "$(params.argoapp)"
        argocd app wait "$(params.argoapp)"
      env:
        - name: ARGOCD_PASS
          valueFrom:
            secretKeyRef:
              name: argocd-env-secret
              key: ARGOCD_PASSWORD
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-generate-secret
spec:
  steps:
    - image: 'quay.io/openshift/origin-cli:latest'
      name: generate-argocd-secret
      script: |
        #!/usr/bin/env bash
        export ARGOCD_USER=$(echo "admin" | base64)
{{- if eq .Values.namespaceGitOps "openshift-gitops"}}
        export ARGOCD_PASS=$(oc get secret {{ .Values.namespaceGitOps }}-cluster -o jsonpath='{.data.admin\.password}' -n {{ .Values.namespaceGitOps }})
{{- else }}
        export ARGOCD_PASS=$(oc get secret argocd-cluster -o jsonpath='{.data.admin\.password}' -n {{ .Values.namespaceGitOps }})
{{- end }}
        cat <<EOF > /tmp/secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: argocd-env-secret
        type: Opaque
        data:
          ARGOCD_USERNAME: ${ARGOCD_USER}
          ARGOCD_PASSWORD: ${ARGOCD_PASS}
        EOF
        oc apply -f /tmp/secret.yaml
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-new-commit-pre-functional-tests
spec:
  workspaces:
    - name: source
  stepTemplate:
    env:
      - name: HOME
        value: $(workspaces.source.path)
  params:
    - name: appurl
      description: The url of the frontend app
      type: string
  steps:
    - name: cypress-install
      args:
        - npm install
      command:
        - /bin/sh
        - '-c'
      image: 'cypress/base:14.15.4'
      workingDir: $(workspaces.source.path)
    - name: cypress-run
      args:
        - './node_modules/.bin/cypress run --env jump_app_url="$(params.appurl)"'
      command:
        - /bin/sh
        - '-c'
      image: 'cypress/base:14.15.4'
      workingDir: $(workspaces.source.path)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-new-commit-image-deployment-test
spec:
  params:
    - name: namespace
      description: The url of the frontend app
      type: string
    - name: deployment
      description: The name of the deployment
      type: string
    - name: version
      description: The name of the deployment version
      type: string
    - name: commit
      description: The name of the commit
      type: string
  steps:
    - name: run-new-build
      image: quay.io/openshift/origin-cli:latest
      script: |
        #!/usr/bin/env bash
        export IMAGE_DEPLOYMENT=`oc get deployment "$(params.deployment)"-"$(params.version)" -o jsonpath="{..image}" -n "$(params.namespace)"`
        if echo $IMAGE_DEPLOYMENT | egrep -iq "$(params.commit)"; then
          echo "OK - Image with commit "$(params.commit)" found"
          exit 0
        else
          echo "FAIL - Image with commit "$(params.commit)" not found"
          exit 1
        fi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: my-git-clone-task
spec:
  description: >-
    Special clone task that outputs the modified, added and removed files
    These Tasks are Git tasks to work with repositories used by other tasks in
    your Pipeline.

  params:
    - name: VERSION
      type: string
      default: "v1.10.2"
    - description: Repository URL to clone from.
      name: url
      type: string
    - default: ''
      description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
      name: revision
      type: string
    - default: ''
      description: Refspec to fetch before checking out revision.
      name: refspec
      type: string
    - default: 'true'
      description: Initialize and fetch git submodules.
      name: submodules
      type: string
    - default: '1'
      description: 'Perform a shallow clone, fetching only the most recent N commits.'
      name: depth
      type: string
    - default: 'true'
      description: >-
        Set the `http.sslVerify` global git config. Setting this to `false` is
        not advised unless you are sure that you trust your git remote.
      name: sslVerify
      type: string
    - default: ca-bundle.crt
      description: >-
        file name of mounted crt using ssl-ca-directory workspace. default value
        is ca-bundle.crt.
      name: crtFileName
      type: string
    - default: ''
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      name: subdirectory
      type: string
    - default: ''
      description: >-
        Define the directory patterns to match or exclude when performing a
        sparse checkout.
      name: sparseCheckoutDirectories
      type: string
    - default: 'true'
      description: >-
        Clean out the contents of the destination directory if it already exists
        before cloning.
      name: deleteExisting
      type: string
    - default: ''
      description: HTTP proxy server for non-SSL requests.
      name: httpProxy
      type: string
    - default: ''
      description: HTTPS proxy server for SSL requests.
      name: httpsProxy
      type: string
    - default: ''
      description: Opt out of proxying HTTP/HTTPS requests.
      name: noProxy
      type: string
    - default: 'true'
      description: Log the commands that are executed during `git-clone`'s operation.
      name: verbose
      type: string
    - default: /home/git
      description: |
        Absolute path to the user's home directory.
      name: userHome
      type: string
  results:
    - description: The precise commit SHA that was fetched by this Task.
      name: commit
      type: string
    - description: The precise URL that was fetched by this Task.
      name: url
      type: string
    - description: The epoch timestamp of the commit that was fetched by this Task.
      name: committer-date
      type: string
    - description: Stringified array of files that were added in the commit.
      name: added
      type: string
    - description: Stringified array of files that were removed in the commit.
      name: removed
      type: string
    - description: Stringified array of files that were modified in the commit.
      name: modified
      type: string
  steps:
    - env:
        - name: HOME
          value: $(params.userHome)
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: PARAM_REFSPEC
          value: $(params.refspec)
        - name: PARAM_SUBMODULES
          value: $(params.submodules)
        - name: PARAM_DEPTH
          value: $(params.depth)
        - name: PARAM_SSL_VERIFY
          value: $(params.sslVerify)
        - name: PARAM_CRT_FILENAME
          value: $(params.crtFileName)
        - name: PARAM_SUBDIRECTORY
          value: $(params.subdirectory)
        - name: PARAM_DELETE_EXISTING
          value: $(params.deleteExisting)
        - name: PARAM_HTTP_PROXY
          value: $(params.httpProxy)
        - name: PARAM_HTTPS_PROXY
          value: $(params.httpsProxy)
        - name: PARAM_NO_PROXY
          value: $(params.noProxy)
        - name: PARAM_VERBOSE
          value: $(params.verbose)
        - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
          value: $(params.sparseCheckoutDirectories)
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
        - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
          value: $(workspaces.ssl-ca-directory.bound)
        - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
          value: $(workspaces.ssl-ca-directory.path)
      image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8:$(params.VERSION)
      name: clone
      resources: {}
      script: |
        #!/usr/bin/env sh

        set -eu


        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi


        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi


        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi


        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
           export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
           if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
              export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
           fi
        fi

        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"


        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.

          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }


        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir || true
        fi


        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"

        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"


        git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"

        if [ "${PARAM_SSL_VERIFY}" = true ]; then
            GIT_SSL_NO_VERIFY=false
        else
            GIT_SSL_NO_VERIFY=true
        fi

        git config --global http.sslVerify "${PARAM_SSL_VERIFY}"

        # Clone the repository

        git clone "${PARAM_URL}" "${CHECKOUT_DIR}"

        ls -la ${CHECKOUT_DIR}

        # /ko-app/git-init \
        #   -url="${PARAM_URL}" \
        #   -revision="${PARAM_REVISION}" \
        #   -refspec="${PARAM_REFSPEC}" \
        #   -path="${CHECKOUT_DIR}" \
        #   -sslVerify="${PARAM_SSL_VERIFY}" \
        #   -submodules="${PARAM_SUBMODULES}" \
        #   -depth="${PARAM_DEPTH}" \
        #   -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"

        cd "${CHECKOUT_DIR}"

        # Checkout the revision

        git checkout "${PARAM_REVISION}"

        # Clone submodules if specified

        if [ "${PARAM_SUBMODULES}" = true ];
        then
            git submodule update --init --recursive
        fi

        RESULT_SHA="$(git rev-parse HEAD)"

        EXIT_CODE="$?"

        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi

        RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"

        printf "%s" "${RESULT_COMMITTER_DATE}" > "$(results.committer-date.path)"

        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"

        printf "%s" "${PARAM_URL}" > "$(results.url.path)"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
  workspaces:
    - description: The git repo will be cloned onto the volume backing this Workspace.
      name: output
    - description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
      name: ssh-directory
      optional: true
    - description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
      name: basic-auth
      optional: true
    - description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
      name: ssl-ca-directory
      optional: true